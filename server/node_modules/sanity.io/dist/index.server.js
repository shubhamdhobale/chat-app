"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getProductFromSlug = void 0;
let SANITY_STUDIO_PROJECT_ID;
let SANITY_STUDIO_DATASET;
if (typeof process !== 'undefined' && process.env) {
    if (process.env.SANITY_STUDIO_PROJECT_ID) {
        SANITY_STUDIO_PROJECT_ID = process.env.SANITY_STUDIO_PROJECT_ID;
    }
    if (process.env.SANITY_STUDIO_DATASET) {
        SANITY_STUDIO_DATASET = process.env.SANITY_STUDIO_DATASET;
    }
}
function getProductFromSlug(slug) {
    const query = `*[_type == 'product' && store.slug.current == '${slug}'][0]`;
    const url = `https://${SANITY_STUDIO_PROJECT_ID}.api.sanity.io/v1/data/query/${SANITY_STUDIO_DATASET}`;
    const response = api(url, query);
    return response;
}
exports.getProductFromSlug = getProductFromSlug;
function api(url, query) {
    return __awaiter(this, void 0, void 0, function* () {
        const res = yield fetch(url, {
            method: "POST",
            body: JSON.stringify({
                query: query,
            }),
            headers: {
                "content-type": "application/json",
            },
        });
        const res_1 = yield res.json();
        const resJson = res_1.result;
        const res_2 = {
            ok: res.ok,
            status: res.status,
            body: resJson,
        };
        if (res_2.ok) {
            return res_2.body;
        }
        return Promise.reject({
            status: res_2.status,
            message: res_2.body,
        });
    });
}
//# sourceMappingURL=index.server.js.map